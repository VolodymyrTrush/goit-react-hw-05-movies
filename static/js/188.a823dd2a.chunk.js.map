{"version":3,"file":"static/js/188.a823dd2a.chunk.js","mappings":"gVAGAA,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbA,OAAQ,CAAEC,QAAS,qCAGRC,EAAgB,mCAAG,+GAELH,IAAAA,IAAU,sBAAuBC,GAF5B,cAEtBG,EAFsB,OAGtBC,EAAaD,EAASE,KAAKC,QAHL,kBAIrBF,GAJqB,gCAM5BG,EAAAA,GAAAA,MAAY,kCANgB,yDAAH,qDAUhBC,EAAW,mCAAG,WAAMC,GAAN,kGAEAV,IAAAA,IAAA,iBAAoBU,GAAUT,GAF9B,cAEjBG,EAFiB,OAIjBO,EAAeP,EAASE,KAJP,kBAKhBK,GALgB,gCAOvBH,EAAAA,GAAAA,MAAY,kCAPW,yDAAH,sDAWXI,EAAW,mCAAG,WAAMF,GAAN,kGAEAV,IAAAA,IAAA,iBAAoBU,EAApB,YAAsCT,GAFtC,cAEjBG,EAFiB,OAGjBS,EAAWT,EAASE,KAAKQ,KAHR,kBAIhBD,GAJgB,gCAMvBL,EAAAA,GAAAA,MAAY,kCANW,yDAAH,sDAUXO,EAAc,mCAAG,WAAML,GAAN,kGAEHV,IAAAA,IAAA,iBAAoBU,EAApB,YAAsCT,GAFnC,cAEpBG,EAFoB,OAGpBY,EAAcZ,EAASE,KAAKC,QAHR,kBAInBS,GAJmB,gCAM1BR,EAAAA,GAAAA,MAAY,kCANc,yDAAH,sDAUdS,EAAc,mCAAG,WAAMC,GAAN,kGAEHlB,IAAAA,IAAA,gBAA2B,CAChDC,QAAO,kBACFA,EAAOA,QADN,IAEJiB,MAAOA,MALe,cAEpBd,EAFoB,OASpBe,EAAef,EAASE,KAAKC,QATT,kBAUnBY,GAVmB,gCAY1BX,EAAAA,GAAAA,MAAY,kCAZc,yDAAH,uD,uGChDdY,EAAWC,EAAAA,GAAAA,GAAH,8FAORC,EAAqBD,EAAAA,GAAAA,EAAH,2C,sICPlBE,EAAcF,EAAAA,GAAAA,GAAH,qGAOXG,EAAgBH,EAAAA,GAAAA,EAAH,yFAMbI,EAAcJ,EAAAA,GAAAA,EAAH,4C,mBCyBxB,EAlCgB,WACd,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAUA,OARAC,EAAAA,EAAAA,YAAU,YACRhB,EAAAA,EAAAA,IAAeW,GAASM,MAAK,SAAAC,GACvBC,MAAMC,QAAQF,IAChBH,EAAWG,QAGd,CAACP,KAGF,yBACGG,EAAQO,OAAS,GAChB,SAACb,EAAD,UACGM,EAAQQ,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,UAAChB,EAAD,sBAAwBe,MACxB,SAACd,EAAD,UAAce,MAFPF,SAQf,SAAC,IAAD","sources":["service/api.js","views/Cast/Cast.styled.jsx","views/Reviews/Reviews.styled.jsx","views/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: { api_key: '6b956d9320e8e098b01748da89295179' },\n};\n\nexport const getTrendingFilms = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', params);\n    const filmsArray = response.data.results;\n    return filmsArray;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmById = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}`, params);\n\n    const filmsDetails = response.data;\n    return filmsDetails;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmCast = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/credits`, params);\n    const filmCast = response.data.cast;\n    return filmCast;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmReviews = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/reviews`, params);\n    const filmReviews = response.data.results;\n    return filmReviews;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmByQuery = async query => {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        ...params.params,\n        query: query,\n      },\n    });\n\n    const filmsByQuery = response.data.results;\n    return filmsByQuery;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  padding: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n`;\n\nexport const StyledErrorMessage = styled.p`\n  padding: 20px;\n`;\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const ReviewsAuthor = styled.p`\n  font-weight: 500;\n  margin-bottom: 12px;\n  font-size: 16px;\n`;\n\nexport const ReviewsText = styled.p`\n  font-size: 12px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'service/api';\nimport { ReviewsList, ReviewsAuthor, ReviewsText } from './Reviews.styled';\nimport { StyledErrorMessage } from 'views/Cast/Cast.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    getFilmReviews(movieId).then(res => {\n      if (Array.isArray(res)) {\n        setReviews(res);\n      }\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <ReviewsAuthor>Author: {author}</ReviewsAuthor>\n                <ReviewsText>{content}</ReviewsText>\n              </li>\n            );\n          })}\n        </ReviewsList>\n      ) : (\n        <StyledErrorMessage>\n          Sorry, we don't have information\n        </StyledErrorMessage>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","params","api_key","getTrendingFilms","response","filmsArray","data","results","toast","getFilmById","filmId","filmsDetails","getFilmCast","filmCast","cast","getFilmReviews","filmReviews","getFilmByQuery","query","filmsByQuery","CastList","styled","StyledErrorMessage","ReviewsList","ReviewsAuthor","ReviewsText","movieId","useParams","useState","reviews","setReviews","useEffect","then","res","Array","isArray","length","map","id","author","content"],"sourceRoot":""}