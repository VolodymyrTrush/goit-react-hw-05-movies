{"version":3,"file":"static/js/921.b80876bd.chunk.js","mappings":"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","sources":["components/FilmList/FilmList.styled.jsx","components/FilmList/FilmList.js","components/Section.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.js","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n`;\n\nexport const List = styled.ul`\n  padding-left: 20px;\n`;\n\nexport const ListItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Title, List, ListItem } from './FilmList.styled';\nimport { Section } from 'components/Section';\n\nconst FilmList = ({ films, title }) => {\n  const location = useLocation();\n\n  return (\n    <Section>\n      {title && <Title>{title}</Title>}\n      <List>\n        {films.map(({ title, id }) => {\n          return (\n            <ListItem key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Section>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n  title: PropTypes.string,\n};\n\nexport default FilmList;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding-top: 32px;\n  padding-bottom: 32px;\n`;\n","import styled from 'styled-components';\n\nexport const FormConatiner = styled.div`\n  padding: 20px;\n`;\n","import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { FormConatiner } from './SearchForm.styled';\n\nconst schema = yup.object({\n  query: yup.string().required(),\n});\n\nconst SearchForm = ({ setSearchParams, searchParams }) => {\n  const initialValues = {\n    query: `${searchParams.get('query') ?? ''}`,\n  };\n\n  const handleSubmit = value => {\n    setSearchParams({ query: value.query.trim() });\n  };\n\n  return (\n    <FormConatiner>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <Field type=\"text\" name=\"query\" placeholder=\"Please, enter a query\" />\n          <button type=\"submit\">Search</button>\n        </Form>\n      </Formik>\n    </FormConatiner>\n  );\n};\n\nSearchForm.propTypes = {\n  setSearchParams: PropTypes.func.isRequired,\n  searchParams: PropTypes.object,\n};\n\nexport default SearchForm;\n","import SearchForm from 'components/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getFilmByQuery } from 'services/api';\nimport FilmList from 'components/FilmList';\nimport toast from 'react-hot-toast';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const [filmsByQuery, setFilmsByQuery] = useState([]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    getFilmByQuery(query).then(res => {\n      if (res.length > 0) {\n        setFilmsByQuery(res);\n      } else {\n        toast.error('Sorry, there are no movies for your request');\n      }\n    });\n  }, [query]);\n\n  return (\n    <div>\n      <SearchForm\n        setSearchParams={setSearchParams}\n        searchParams={searchParams}\n      />\n\n      {filmsByQuery.length > 0 && <FilmList films={filmsByQuery} />}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: { api_key: '6b956d9320e8e098b01748da89295179' },\n};\n\nexport const getTrendingFilms = async () => {\n  try {\n    const response = await axios.get('/trending/movie/day', params);\n    const filmsArray = response.data.results;\n    return filmsArray;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmById = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}`, params);\n\n    const filmsDetails = response.data;\n    return filmsDetails;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmCast = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/credits`, params);\n    const filmCast = response.data.cast;\n    return filmCast;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmReviews = async filmId => {\n  try {\n    const response = await axios.get(`/movie/${filmId}/reviews`, params);\n    const filmReviews = response.data.results;\n    return filmReviews;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\nexport const getFilmByQuery = async query => {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        ...params.params,\n        query: query,\n      },\n    });\n\n    const filmsByQuery = response.data.results;\n    return filmsByQuery;\n  } catch (error) {\n    toast.error('Ups... Something went wrong :(');\n  }\n};\n\n\n\n"],"names":["Title","styled","List","ListItem","films","title","location","useLocation","Section","map","id","to","state","from","FormConatiner","schema","yup","query","required","setSearchParams","searchParams","initialValues","get","validationSchema","onSubmit","value","trim","autoComplete","type","name","placeholder","useSearchParams","useState","filmsByQuery","setFilmsByQuery","useEffect","getFilmByQuery","then","res","length","toast","FilmList","axios","params","api_key","getTrendingFilms","response","filmsArray","data","results","getFilmById","filmId","filmsDetails","getFilmCast","filmCast","cast","getFilmReviews","filmReviews"],"sourceRoot":""}