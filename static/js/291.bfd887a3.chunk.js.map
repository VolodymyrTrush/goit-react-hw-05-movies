{"version":3,"file":"static/js/291.bfd887a3.chunk.js","mappings":"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","sources":["api/movies-api.js","pages/MovieDetailsPage/MovieDetailsPage.styled.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0d3c19a06e728eab3e881b744ba766c6';\n\nconst fetchWithKey = async (url = '', query = '') => {\n  const paramsObj = {\n    api_key: API_KEY,\n  };\n\n  if (query) {\n    paramsObj.query = query;\n  }\n\n  const searchParams = new URLSearchParams(paramsObj);\n  const response = await Axios.get(`${url}?${searchParams}`);\n  return await response.data;\n};\n\nexport const fetchPopularMovies = async () => {\n  const data = await fetchWithKey('/trending/movie/week');\n  return data.results;\n};\n\nexport const fetchMovieById = async movieID => {\n  return await fetchWithKey(`/movie/${movieID}`);\n};\n\nexport const fetchMovieCast = async movieID => {\n  const data = await fetchWithKey(`/movie/${movieID}/credits`);\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async movieID => {\n  const data = await fetchWithKey(`/movie/${movieID}/reviews`);\n  return data.results;\n};\n\nexport const fetchWithSearch = async key_word => {\n  const data = await fetchWithKey(`/search/movie`, key_word);\n  return data.results;\n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\ndisplay: flex;\npadding-bottom: 20px;\nborder-bottom: 1px solid #ccc;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  width: 500px;\n  height: auto;\n`;\n\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-basis: fit-content;\n  margin-left: 30px;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n`;\n\nexport const Label = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const OverviewText = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 10px;\n  cursor: pointer;\n  background-color: #fff;\n  padding: 10px;\n  border: 1px solid #ccc;\n    &:hover {\n    background-color: #orange;\n  `;","import styled from 'styled-components';\n\nexport const Profile = styled.div`\n    width: 150px;\n    margin-right: 20px;\n    `;\n\nexport const Person = styled.div`\n    padding: 10px;\n    width: 500px;\n    > img {\n        width: 200px;\n    }\n    `;    ","import { useEffect, useState } from 'react';\nimport * as Api from '../../api/movies-api';\nimport {Profile, Person} from './Cast.styled';\nimport PropTypes from 'prop-types';\n\n\nexport const Cast = ({ id }) => {\n  const [cast, setCast] = useState(null);\n  useEffect(() => {\n    Api.fetchMovieCast(id).then(setCast);\n  }, [id]);\n\n  return (\n    <>\n      {cast && (\n        <ul>\n          {cast.map(({ name, character, profile_path, id }) => (\n            <li key={id}>\n              <Person>\n                {profile_path && (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                    alt={name}\n                  />\n                )}\n                <Profile>\n                  <p>{name}</p>\n                  <p>Character: {character}</p>\n                </Profile>\n              </Person>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  id: PropTypes.string.isRequired,\n}","import { useEffect, useState } from 'react';\nimport * as Api from '../../api/movies-api';\nimport PropTypes from 'prop-types';\n\n\nexport const Reviews = ({ id }) => {\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    Api.fetchMovieReviews(id).then(setReviews);\n  }, [id]);\n\n  return (\n    <>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <div>\n                <div>\n                  <h3>Author: {author}</h3>\n                  <p>{content}</p>\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>There is no reviews yet!</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  id: PropTypes.string.isRequired,\n}\n","import { NavLink, Route, Routes, useParams, useNavigate, useLocation, } from 'react-router-dom';\nimport { useState, useEffect, Suspense, useRef } from 'react';\nimport * as Api from './../../api/movies-api';\nimport {Image, Label, OverviewText, Wrapper, Description, Title, Button} from './MovieDetailsPage.styled';\nimport placeholderImg from './../../img/poster.jpg';\nimport  Cast from './../../components/Cast/Cast';\nimport  Reviews  from 'components/Reviews/Reviews';\nimport PropTypes from 'prop-types';\n\nconst INIT_STATE = {\n    init: true,\n    title: '',\n    poster_path: '',\n    vote_average: '',\n    overview: '',\n    genres: [],\n  };\n\n export const MovieDetailsPage = () => {\n    const [movie, setMovie] = useState(INIT_STATE);\n    const navigate = useNavigate();\n    const { state } = useLocation();\n    const placeToReturn = useRef(null);\n\n    useEffect(() => {\n        if (state) {\n            placeToReturn.current = state;\n          }\n        }, [state]);\n\n    const goBack = () => {\n        const returnTo = placeToReturn.current ? placeToReturn.current : '/';\n        navigate(returnTo);\n      };\n\n    const { slug } = useParams();\n    const movieID = slug.match(/[a-z0-9]+$/)[0];\n\n\n\n    useEffect(() => {\n        Api.fetchMovieById(movieID).then(setMovie);\n      }, [movieID]);\n\n      const { title, poster_path, vote_average, overview, genres } = movie;\n        const genresList = genres.map(genre => genre.name).join(', ');\n\n    return (\n        <>\n            <Button type='button' onClick={goBack}>Back{placeToReturn.current?.label}\n            </Button>\n            {!movie.init && (\n     <>\n          <Wrapper>\n            <Image src={poster_path ? \n                `https://image.tmdb.org/t/p/w300${poster_path}` \n                : placeholderImg} alt={title} \n                />\n            <Description>\n                <Title>{title}</Title>\n                <Label>User score: {vote_average *10} %</Label>\n                <Label>Overview</Label>\n                <OverviewText>{overview}</OverviewText>\n                <Label>Genres</Label>\n                <p>{genresList}</p>\n            </Description>\n            </Wrapper>\n             <ul>\n              <li>\n                <NavLink to=\"cast\">Cast</NavLink>\n              </li>\n              <li>\n                <NavLink to=\"reviews\">Reviews</NavLink>\n              </li>\n            </ul>    \n             <Suspense fallback={<h1>LOADING THE ROUTE...</h1>}>\n                <Routes>\n                    <Route path=\"cast\" element={<Cast id={movieID} />} />\n                    <Route path=\"reviews\" element={<Reviews id={movieID} />} />\n                </Routes>\n             </Suspense>\n             </>\n        )}\n    </>\n    );\n}\nexport default MovieDetailsPage;\n\nMovieDetailsPage.propTypes = {\n        id: PropTypes.string,\n}\n    "],"names":["Axios","API_KEY","fetchWithKey","url","query","paramsObj","api_key","searchParams","URLSearchParams","response","data","fetchPopularMovies","results","fetchMovieById","movieID","fetchMovieCast","cast","fetchMovieReviews","fetchWithSearch","key_word","Wrapper","styled","Image","Description","Title","Label","OverviewText","Button","Profile","Person","id","useState","setCast","useEffect","Api","then","map","name","character","profile_path","src","alt","reviews","setReviews","length","author","content","INIT_STATE","init","title","poster_path","vote_average","overview","genres","MovieDetailsPage","movie","setMovie","navigate","useNavigate","state","useLocation","placeToReturn","useRef","current","useParams","slug","match","genresList","genre","join","type","onClick","returnTo","label","placeholderImg","to","Suspense","fallback","path","element"],"sourceRoot":""}